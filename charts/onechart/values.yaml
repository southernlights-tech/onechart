image:
  repository: nginx
  tag: "latest"
  pullPolicy: IfNotPresent

# ingress:
#   host: chart-example.local
#   ingressClassName: nginx
#   tlsEnabled: true
#   annotations:
#     cert-manager.io/cluster-issuer: letsencrypt-staging
#   nginxBasicAuth:
#     user: admin
#     password: secret

# vars:
#   MY_VAR: "value"

replicas: 1

# Default strategy provides zero-downtime deployments
# Note: Single replica deployments with volumes will still use Recreate strategy
strategy:
  type: RollingUpdate
  rollingUpdate:
    maxSurge: 25%
    maxUnavailable: 0

nameOverride: ""
fullnameOverride: ""

podAnnotations: {}

podLabels: {}

podSecurityContext:
  fsGroup: 999

securityContext: {}

containerPort: 80

resources:
  requests:
    cpu: "200m"
    memory: "200Mi"
  limits:
    memory: "200Mi"

nodeSelector: {}

tolerations: []

probe:
  enabled: false
  type: "http"
  path: "/"
  command: ["uname", "-a"]
  settings:
    initialDelaySeconds: 0
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 3
    failureThreshold: 3

# Before you use a liveness probe: https://srcco.de/posts/kubernetes-liveness-probes-are-dangerous.html
livenessProbe:
  enabled: false
  path: "/"
  settings:
    initialDelaySeconds: 0
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 3
    failureThreshold: 3

secretEnabled: false

shell: "/bin/sh"

podDisruptionBudgetEnabled: true
spreadAcrossNodes: false

nodePortEnabled: false

# Set true to enable service monitor.
monitor:
  enabled: false

container: {}
podSpec: {}

secrets:
  secretManager: {}
  # Example configuration for AWS Secrets Manager:
  # secretManager:
  #   name: "my-secret-name"
  #   keys:
  #     - "SECRET_KEY_1"
  #     - "SECRET_KEY_2"
  #   # Optional: Remap secret keys to different environment variable names
  #   keyMappings:
  #     SECRET_KEY_1: "ENV_VAR_1"   # Maps SECRET_KEY_1 -> ENV_VAR_1
  #     SECRET_KEY_2: "ENV_VAR_2"   # Maps SECRET_KEY_2 -> ENV_VAR_2
  #   csi:
  #     name: "secrets-store"
  #     path: "/mnt/secrets-store"

serviceAccountCreate: {}

autoscaling:
  minReplicas: 2
  maxReplicas: 50
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
        type: Pods
        value: 5
        periodSeconds: 300
    scaleUp:
      stabilizationWindowSeconds: 15
      policies:
        type: Pods
        value: 10
        periodSeconds: 15
  # cpuAverageUtilization: percentage of the requested value of the resource for the pods.
  # memoryAverageUtilization: percentage of the requested value of the resource for the pods.

# Kong plugin configurations
kong:
  plugins: {}
    # Example CORS plugin using response-transformer
    # cors:
    #   enabled: false
    #   plugin: response-transformer
    #   config:
    #     append:
    #       headers:
    #         - "access-control-allow-origin:https://example.com"
    #         - "access-control-allow-credentials:true"
    
    # Example rate limiting plugin
    # rate-limit:
    #   enabled: false
    #   plugin: rate-limiting
    #   config:
    #     minute: 100
    #     hour: 1000
    #     policy: local
    
    # Example request transformer plugin
    # request-transformer:
    #   enabled: false
    #   plugin: request-transformer
    #   config:
    #     add:
    #       headers:
    #         - "X-Custom-Header:custom-value"
    #     remove:
    #       headers:
    #         - "X-Remove-Header"
